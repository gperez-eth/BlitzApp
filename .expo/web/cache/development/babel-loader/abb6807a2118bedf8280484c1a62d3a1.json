{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\BlitzApp\\\\src\\\\Components\\\\LoadAssets.tsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nimport { AppLoading } from \"expo\";\nimport { Asset } from \"expo-asset\";\nimport * as Font from \"expo-font\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport Constants from \"expo-constants\";\nvar NAVIGATION_STATE_KEY = \"NAVIGATION_STATE_KEY-\" + Constants.manifest.sdkVersion;\n\nvar usePromiseAll = function usePromiseAll(promises, cb) {\n  return useEffect(function () {\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Promise.all(promises));\n\n            case 2:\n              cb();\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  });\n};\n\nvar useLoadAssets = function useLoadAssets(assets, fonts) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ready = _useState2[0],\n      setReady = _useState2[1];\n\n  usePromiseAll([Font.loadAsync(fonts)].concat(_toConsumableArray(assets.map(function (asset) {\n    return Asset.loadAsync(asset);\n  }))), function () {\n    return setReady(true);\n  });\n  return ready;\n};\n\nvar LoadAssets = function LoadAssets(_ref) {\n  var assets = _ref.assets,\n      fonts = _ref.fonts,\n      children = _ref.children;\n\n  var _useState3 = useState(!__DEV__),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isNavigationReady = _useState4[0],\n      setIsNavigationReady = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      initialState = _useState6[0],\n      setInitialState = _useState6[1];\n\n  var ready = useLoadAssets(assets || [], fonts || {});\n  useEffect(function () {\n    var restoreState = function restoreState() {\n      var savedStateString, state;\n      return _regeneratorRuntime.async(function restoreState$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(NAVIGATION_STATE_KEY));\n\n            case 3:\n              savedStateString = _context2.sent;\n              state = savedStateString ? JSON.parse(savedStateString) : undefined;\n              setInitialState(state);\n\n            case 6:\n              _context2.prev = 6;\n              setIsNavigationReady(true);\n              return _context2.finish(6);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, [[0,, 6, 9]], Promise);\n    };\n\n    if (!isNavigationReady) {\n      restoreState();\n    }\n  }, [isNavigationReady]);\n  var onStateChange = useCallback(function (state) {\n    return AsyncStorage.setItem(NAVIGATION_STATE_KEY, JSON.stringify(state));\n  }, []);\n\n  if (!ready || !isNavigationReady) {\n    return React.createElement(AppLoading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return React.createElement(NavigationContainer, _extends({\n    onStateChange: onStateChange,\n    initialState: initialState\n  }, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }), children);\n};\n\nexport default LoadAssets;","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/BlitzApp/src/Components/LoadAssets.tsx"],"names":["React","useCallback","useEffect","useState","AppLoading","Asset","Font","NavigationContainer","Constants","NAVIGATION_STATE_KEY","manifest","sdkVersion","usePromiseAll","promises","cb","Promise","all","useLoadAssets","assets","fonts","ready","setReady","loadAsync","map","asset","LoadAssets","children","__DEV__","isNavigationReady","setIsNavigationReady","initialState","setInitialState","restoreState","AsyncStorage","getItem","savedStateString","state","JSON","parse","undefined","onStateChange","setItem","stringify"],"mappings":"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","sourcesContent":["import React, { ReactElement, useCallback, useEffect, useState } from \"react\";\r\nimport { AsyncStorage } from \"react-native\";\r\nimport { AppLoading } from \"expo\";\r\nimport { Asset } from \"expo-asset\";\r\nimport * as Font from \"expo-font\";\r\nimport { InitialState, NavigationContainer } from \"@react-navigation/native\";\r\nimport Constants from \"expo-constants\";\r\n\r\nconst NAVIGATION_STATE_KEY = `NAVIGATION_STATE_KEY-${Constants.manifest.sdkVersion}`;\r\n\r\nexport type FontSource = Parameters<typeof Font.loadAsync>[0];\r\nconst usePromiseAll = (promises: Promise<void | void[]>[], cb: () => void) =>\r\n  useEffect(() => {\r\n    (async () => {\r\n      await Promise.all(promises);\r\n      cb();\r\n    })();\r\n  });\r\n\r\nconst useLoadAssets = (assets: number[], fonts: FontSource): boolean => {\r\n  const [ready, setReady] = useState(false);\r\n  usePromiseAll(\r\n    [Font.loadAsync(fonts), ...assets.map((asset) => Asset.loadAsync(asset))],\r\n    () => setReady(true)\r\n  );\r\n  return ready;\r\n};\r\n\r\ninterface LoadAssetsProps {\r\n  fonts?: FontSource;\r\n  assets?: number[];\r\n  children: ReactElement | ReactElement[];\r\n}\r\n\r\nconst LoadAssets = ({ assets, fonts, children }: LoadAssetsProps) => {\r\n  const [isNavigationReady, setIsNavigationReady] = useState(!__DEV__);\r\n  const [initialState, setInitialState] = useState<InitialState | undefined>();\r\n  const ready = useLoadAssets(assets || [], fonts || {});\r\n  useEffect(() => {\r\n    const restoreState = async () => {\r\n      try {\r\n        const savedStateString = await AsyncStorage.getItem(\r\n          NAVIGATION_STATE_KEY\r\n        );\r\n        const state = savedStateString\r\n          ? JSON.parse(savedStateString)\r\n          : undefined;\r\n        setInitialState(state);\r\n      } finally {\r\n        setIsNavigationReady(true);\r\n      }\r\n    };\r\n\r\n    if (!isNavigationReady) {\r\n      restoreState();\r\n    }\r\n  }, [isNavigationReady]);\r\n  const onStateChange = useCallback(\r\n    (state) =>\r\n      AsyncStorage.setItem(NAVIGATION_STATE_KEY, JSON.stringify(state)),\r\n    []\r\n  );\r\n  if (!ready || !isNavigationReady) {\r\n    return <AppLoading />;\r\n  }\r\n  return (\r\n    <NavigationContainer {...{ onStateChange, initialState }}>\r\n      {children}\r\n    </NavigationContainer>\r\n  );\r\n};\r\n\r\nexport default LoadAssets;"]},"metadata":{},"sourceType":"module"}